// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Log {
//   id         BigInt   @id @default(autoincrement())
//   level      String   // "info", "warn", "error", "debug"
//   message    String
//   context    String?  // misalnya: "UserService.create"
//   meta       Json?    // info tambahan dalam bentuk JSON
//   created_at  DateTime @default(now())
//   createdBy  String?  // bisa "system" atau user ID/email

//   @@index([level])
//   @@index([created_at])
// }


model User {
  user_id       String @id @default(uuid())
  username      String    @unique
  password      String
  role          String
  deleted_at   DateTime?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("users")
}

model Client{
  client_id       String @id @default(uuid())
  client_name     String @unique
  currency        String
  country         String
  client_address  String
  postal_code     String
  client_phone    String
  deleted_at   DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  invoices        Invoice[]

  @@map("clients")
}

model Invoice{
  invoice_id          String    @id @default(uuid())
  invoice_number      String    @unique
  issue_date          DateTime //tanggal terbit
  due_date            DateTime //jatuh tempo (prisma ga ada tipe data date)
  sub_total           Float
  tax_rate            Float
  tax_amount          Float
  total               Float
  tax_invoice_number  String
  amount_paid         Float
  payment_status      String
  voidedAt            DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  //relasi user - invoice
  client_id           String
  client              Client @relation(fields: [client_id], references: [client_id], onDelete: Cascade)

  //relasi invoice - invoice_detail
  invoice_details     InvoiceDetail[]

  //relasi invoice - payment
  payments            Payment[]

  @@map("invoices")
}

model InvoiceDetail{
  invoice_detail_id     String @id @default(uuid())
  transaction_note      String
  delivery_count        Int //ada big int
  price_per_delivery    Float
  amount                Float
  deleted_at            DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  @@map("invoice_details")

  //relasi invoice - invoice_detail
  invoice_id        String
  invoice           Invoice @relation(fields: [invoice_id], references: [invoice_id], onDelete: Cascade)
}

model Payment{
  payment_id            String @id @default(uuid())
  payment_date          DateTime
  amount_paid           Float
  proof_of_transfer     String
  voidedAt              DateTime?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@map("payments")

  //relasi invoice - payment
  invoice_id          String
  invoice             Invoice @relation(fields: [invoice_id], references: [invoice_id], onDelete: Cascade)
}